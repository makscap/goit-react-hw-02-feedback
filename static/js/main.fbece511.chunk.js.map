{"version":3,"sources":["components/Feedback/Feedback.module.css","components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification.jsx","components/Feedback/Feedback.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Section","title","children","className","s","header","FeedbackOptions","options","onLeaveFeedback","map","el","type","button","onClick","slice","toUpperCase","uuidv4","Statistics","goodStats","neutralStats","badStats","total","positivePercentage","text","Notification","message","Feedback","state","good","neutral","bad","item","setState","prevState","this","Math","round","countTotalFeedback","feedback","statistics","countPositiveFeedbackPercentage","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,SAAW,2BAA2B,OAAS,yBAAyB,WAAa,6BAA6B,KAAO,uBAAuB,OAAS,2B,+HCe5JC,MAZf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,qCACGD,GAAS,oBAAIE,UAAWC,IAAEC,OAAjB,SAA0BJ,IACnCC,M,2CCeQI,EAlBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,mCACGD,EAAQE,KAAI,SAAAC,GAAE,OACb,wBAEEC,KAAK,SACLR,UAAWC,IAAEQ,OACbC,QAAS,kBAAML,EAAgBE,IAJjC,SAMGA,EAAGI,MAAM,EAAG,GAAGC,cAAgBL,EAAGI,MAAM,IALpCE,qBCiBEC,EAtBI,SAAC,GAAD,IACjBC,EADiB,EACjBA,UACAC,EAFiB,EAEjBA,aACAC,EAHiB,EAGjBA,SACAC,EAJiB,EAIjBA,MACAC,EALiB,EAKjBA,mBALiB,OAOjB,qCACE,oBAAGnB,UAAWC,IAAEmB,KAAhB,kBAA4BL,KAC5B,oBAAGf,UAAWC,IAAEmB,KAAhB,qBAA+BJ,KAC/B,oBAAGhB,UAAWC,IAAEmB,KAAhB,iBAA2BH,KAC3B,oBAAGjB,UAAWC,IAAEmB,KAAhB,mBAA6BF,KAC7B,oBAAGlB,UAAWC,IAAEmB,KAAhB,+BAAyCD,EAAzC,WCLWE,MARf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,mBAAGtB,UAAWC,IAAEmB,KAAhB,SAAuBE,KC2DjBC,E,4MAvDbC,MAAQ,CACNC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPtB,gBAAkB,SAAAuB,GAChB,EAAKC,UAAS,SAAAC,GAAS,sBACpBF,EAAOE,EAAUF,GAAQ,O,mEAIT,MAEYG,KAAKP,MAGpC,OALmB,EAEXC,KAFW,EAELC,QAFK,EAEIC,M,wDAOvB,OAAOK,KAAKC,MAAyB,IAAlBF,KAAKP,MAAMC,KAAcM,KAAKG,wB,+BAQjD,OACE,sBAAKlC,UAAWC,IAAEkC,SAAlB,UACE,cAAC,EAAD,CAASrC,MAAM,wBAAf,SACE,cAAC,EAAD,CACEM,QANQ,CAAC,OAAQ,UAAU,OAO3BC,gBAAiB0B,KAAK1B,oBAG1B,cAAC,EAAD,CAASP,MAAM,aAAaE,UAAWC,IAAEmC,WAAzC,SACiC,IAA9BL,KAAKG,qBACJ,cAAC,EAAD,CAAcZ,QAAQ,wBAEtB,cAAC,EAAD,CACEP,UAAWgB,KAAKP,MAAMC,KACtBT,aAAce,KAAKP,MAAME,QACzBT,SAAUc,KAAKP,MAAMG,IACrBT,MAAOa,KAAKG,qBACZf,mBAAoBY,KAAKM,6C,GA/ChBC,aCHR,SAASC,IACtB,OACE,eAAC,EAAD,WACE,cAAC,EAAD,IADF,OCNJ,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACZ,EAAD,MAEFa,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fbece511.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"feedback\":\"Feedback_feedback__3n1tl\",\"header\":\"Feedback_header__1nQwf\",\"statistics\":\"Feedback_statistics__1lsnk\",\"text\":\"Feedback_text__frkXL\",\"button\":\"Feedback_button__1E_-H\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from '../Feedback/Feedback.module.css';\n\nfunction Section({ title, children }) {\n  return (\n    <>\n      {title && <h1 className={s.header}>{title}</h1>}\n      {children}\n    </>\n  );\n}\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\nexport default Section;","import React from 'react';\nimport s from '../Feedback/Feedback.module.css';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <>\n    {options.map(el => (\n      <button\n        key={uuidv4()}\n        type=\"button\"\n        className={s.button}\n        onClick={() => onLeaveFeedback(el)}\n      >\n        {el.slice(0, 1).toUpperCase() + el.slice(1)}\n      </button>\n    ))}\n  </>\n);\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string),\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\nexport default FeedbackOptions;","import React from 'react';\nimport s from '../Feedback/Feedback.module.css';\nimport PropTypes from 'prop-types';\n\nconst Statistics = ({\n  goodStats,\n  neutralStats,\n  badStats,\n  total,\n  positivePercentage,\n}) => (\n  <>\n    <p className={s.text}>Good:{goodStats}</p>\n    <p className={s.text}>Neutral:{neutralStats}</p>\n    <p className={s.text}>Bad:{badStats}</p>\n    <p className={s.text}>Total:{total}</p>\n    <p className={s.text}>Positive feedback:{positivePercentage}%</p>\n  </>\n);\nStatistics.propTypes = {\n  goodStats: PropTypes.number.isRequired,\n  neutralStats: PropTypes.number.isRequired,\n  badStats: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\nexport default Statistics;","import PropTypes from 'prop-types';\nimport s from '../Feedback/Feedback.module.css';\n\nfunction Notification({ message }) {\n  return <p className={s.text}>{message}</p>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;","import React, { Component } from 'react';\nimport Section from '../Section/Section';\nimport FeedbackOptions from '../FeedbackOptions/FeedbackOptions';\nimport Statistics from '../Statistics/Statistics';\nimport s from '../Feedback/Feedback.module.css';\nimport Notification from '../Notification/Notification';\n\nclass Feedback extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onLeaveFeedback = item => {\n    this.setState(prevState => ({\n      [item]: prevState[item] + 1,\n    }));\n  };\n\n  countTotalFeedback() {\n    // return Object.values(this.state).reduce((acc, item) => acc + item, 0);\n    const { good, neutral, bad } = this.state;\n\n    const total = good + neutral + bad;\n    return total;\n  }\n\n  countPositiveFeedbackPercentage() {\n    return Math.round((this.state.good * 100) / this.countTotalFeedback());\n  }\n\n  render() {\n\n    // const { good, neutral, bad } = this.state;\n    const options = ['good', 'neutral','bad'];\n\n    return (\n      <div className={s.feedback}>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={options}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\" className={s.statistics}>\n          {this.countTotalFeedback() === 0 ? (\n            <Notification message=\"No one reported yet\"></Notification>\n          ) : (\n            <Statistics\n              goodStats={this.state.good}\n              neutralStats={this.state.neutral}\n              badStats={this.state.bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default Feedback;","import React from 'react';\nimport Section from './components/Section/Section';\nimport Feedback from './components/Feedback/Feedback';\n\nexport default function App() {\n  return (\n    <Section>\n      <Feedback />;\n    </Section>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}